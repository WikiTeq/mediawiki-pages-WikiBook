-- Module:Book
-- Purpose: Provides utility functions for organizing books, sections, and chapters semantically with navigation and author formatting.
local p = {}

-- Retrieves the book title from the wiki message or defaults to "Book".
local function getBook()
	local book = mw.message.new('wiki-book-title'):plain() or 'Book'
	return book
end

-- Formats a list of authors into either a string or HTML list format.
-- Input:
--   authors: string or table containing author names
--   outputFormat: 'str' for comma-separated, 'ul' for HTML unordered list
function formatAuthors(authors, outputFormat)
    if not authors or authors == '' then
        return ''
    end

    local authorList = {}

    -- Handle different input types
    if type(authors) == 'table' then
        -- Table input - assume it's already a list of authors
        for _, author in ipairs(authors) do
            if author and author ~= '' then
                table.insert(authorList, tostring(author))
            end
        end
    elseif type(authors) == 'string' then
        -- Check if it's HTML content (contains <ul> or <li>)
        if authors:match('<%s*ul%s*>') or authors:match('<%s*li%s*>') then
            -- Already HTML, convert to plain text format for string output
            if outputFormat ~= 'ul' then
                -- Extract authors from HTML
                local result = {}
                for author in authors:gmatch('<li[^>]*>(.-)</li>') do
                    -- Remove any remaining HTML tags and trim whitespace
                    local cleanAuthor = author:match("^%s*(.-)%s*$")
                    if cleanAuthor ~= "" then
                        table.insert(result, cleanAuthor)
                    end
                end
                if #result == 0 then
                    return ''
                end
                -- Format as string regardless of how many authors
                if #result == 1 then
                    return result[1]
                elseif #result == 2 then
                    return result[1] .. ', and ' .. result[2]
                else
                    local finalResult = ''
                    for i, author in ipairs(result) do
                        if i == #result then
                            finalResult = finalResult .. ', and ' .. author
                        else
                            finalResult = finalResult .. author .. ', '
                        end
                    end
                    return finalResult
                end
            else
                -- Return HTML as-is for ul format
                return authors
            end
        else
            -- String with semicolon delimiter
            for author in authors:gmatch("[^;]+") do
                local trimmed = author:match("^%s*(.-)%s*$")
                if trimmed ~= "" then
                    table.insert(authorList, trimmed)
                end
            end
        end
    end

    -- If we got here and authorList is empty, return empty string
    if #authorList == 0 then
        return ''
    end

    -- Format based on output format
    if outputFormat == 'ul' then
        local html = mw.html.create('ul'):css({
        	['margin'] = '0'
        })
        for _, author in ipairs(authorList) do
            html:tag('li'):wikitext(author)
        end
        return tostring(html)
    else
        -- String format - join with commas and "and"
        if #authorList == 1 then
            return authorList[1]
        elseif #authorList == 2 then
            return authorList[1] .. ' and ' .. authorList[2]
        else
            local result = ''
            for i, author in ipairs(authorList) do
                if i == #authorList then
                    result = result .. ' and ' .. author
                else
                    result = result .. author .. ', '
                end
            end
            return result
        end
    end
end

-- Helper to fetch and format chapters for a given section.
local function listChapters(sectionName)
    local chapters = mw.smw.ask{
        '[[Category:Chapter]][[Modification date::+]][[Has parent page::' .. sectionName .. ']]',
        'sort=Has order',
        'order=asc',
        'mainlabel=-',
        '?#-=Chapter',
        '?Chapter author=Authors'
    } or {}

    local chapterTexts = {}
    for _, chapter in ipairs(chapters) do
        local chapterName = chapter['Chapter']
        local authorsText = formatAuthors(chapter['Authors'], 'str')
        table.insert(chapterTexts, string.format('* [[%s]] <span class="wiki-book-list-authors">(%s)</span>\n', chapterName, authorsText))
    end

    return '\n' .. table.concat(chapterTexts, '')
end

-- Generate breadcrumb navigation.
local function breadcrumbs(book, section, chapter)
    local crumbs = {}
    local items = { book, section, chapter }

    -- find last non-nil index
    local lastIndex
    for i = #items, 1, -1 do
        if items[i] ~= nil then
            lastIndex = i
            break
        end
    end

    for i = 1, #items do
        local item = items[i]
        if item then
            if i == lastIndex then
                table.insert(crumbs, string.format('<li class="breadcrumb-item active" style="display:flex">%s</li>', item))
            else
                table.insert(crumbs, string.format('<li class="breadcrumb-item" style="display:flex">[[%s|%s]]</li>', item, item))
            end
        end
    end

    local html = mw.html.create()
    html:tag('div')
        :addClass('wiki-book-breadcrumb-wrapper')
        :attr('aria-label', 'breadcrumb')
        :tag('ul')
        	:css({
        		['list-style'] = 'none',
				['display'] = 'flex',
				['flex-wrap'] = 'wrap',
				['padding'] = '.5rem 1rem',
				['background-color'] = '#f7f7f7'
        	})
            :addClass('wiki-book-breadcrumb')
            :wikitext(table.concat(crumbs, ''))

    return tostring(html)
end

-- Generates navigation links for previous and next items (Section or Chapter).
local function navigation(currentType, parent, currentOrder)
	local function getByOrder(order)
        local result = mw.smw.ask {
            '[[Category:' .. currentType .. ']]' ..
            '[[Modification date::+]]' ..
            '[[Has order::' .. order .. ']]',
            'mainlabel=-',
            '?#-=Target'
        }
        
        return (result and result[1] and result[1]['Target']) or nil
    end

    local navPrev = getByOrder(currentOrder - 1)
    local navNext = getByOrder(currentOrder + 1)

    local html = mw.html.create('div')
    	:addClass('wiki-book-nav')
    	:css({
    		['display'] = 'flex',
    		['gap'] = '2rem',
    		['justify-content'] = 'space-between',
    		['padding'] = '.5rem 1rem',
			['background-color'] = '#f7f7f7',
			['margin-bottom'] = '1rem'
    	})

	local pp = html:tag('span'):addClass('wiki-book-nav-prev')
       	:css({
       		['text-align'] = 'left',
       		['display'] = 'flex',
			['gap'] = '.5rem'
       	})

    if navPrev then
        pp:wikitext(string.format('← [[%s]]', navPrev))
    else
        pp:addClass('wiki-book-nav-prev wiki-book-muted'):wikitext('←')
    end

	local nn = html:tag('span'):addClass('wiki-book-nav-next')
       	:css({
       		['text-align'] = 'right',
       		['display'] = 'flex',
			['gap'] = '.5rem'
       	})
    
    if navNext then
        nn:wikitext(string.format('[[%s]] →', navNext))
    else
        nn:addClass('wiki-book-muted'):wikitext('→')
    end

    return tostring(html)
end

-- Form input
local function createNextChapter()
	
	local currentTitle = mw.title.getCurrentTitle().fullText
	
	-- Query for the highest existing chapter number in this section
	local lastNumber = mw.smw.ask {
		'[[Has parent page::' .. currentTitle ..  ']]',
		'mainlabel=-',
		'?Has order#-=',
		'sort=Has order',
		'order=desc',
		'limit=1'
	} or '0'

	-- Convert result to number or default to 0
	if #lastNumber > 0 then
		lastNumber = tonumber(lastNumber[1][1])
	else
		lastNumber = 0	
	end
	
	-- Calculate next chapter number
	local nextNumber = lastNumber + 1
	
	-- Create form input with pre-filled data
	local frame = mw.getCurrentFrame():callParserFunction(
		'#forminput',
		'form=Chapter',
		'query string=Chapter[Chapter section]=' .. currentTitle .. '&Chapter[Chapter number]=' .. nextNumber
	)
	
	-- Build HTML interface
	local html = mw.html.create()
	
	html:tag('div'):addClass('sysop-show')
		:css({
			['padding'] = '.5rem 1rem',
			['background-color'] = '#f7f7f7',
			['margin'] = '1rem 0'
		})
		:tag('h2'):wikitext('Create a new chapter in this section'):done()
		:tag('p'):wikitext("Enter a chapter title into the field below. " 
			.. "It will bring up a form that is pre-filled with this section's title. "
			.. "It will also pre-fill the chapter number so that the new chapter will become the last chapter in this section. "
			.. "These values can be changed in the form."
		):done()
		:wikitext(frame):done()
		
	return tostring(html)
end

-- Module entry point for the main Book page.
function p.book()
    
    -- Fetch sections
    local sections = mw.smw.ask{
        '[[Category:Section]][[Modification date::+]]',
        'sort=Has order',
        'order=asc',
        'mainlabel=-,',
        '?#-=Section'
    } or {}

    local html = mw.html.create()

    for _, section in ipairs(sections) do
        local sectionName = section['Section']
        html:wikitext(string.format('; [[%s]]\n', sectionName))
        html:wikitext(listChapters(sectionName))
    end

    return html
end

-- Module entry point for Section pages.
function p.section(frame)
	
    local category = 'Section'
    local section = mw.title.getCurrentTitle().fullText
    local book = getBook()
    
    local args = frame:getParent().args
    local sectionNumber = args['Section number']

    local crumbs = breadcrumbs(book, section, nil) -- chapterTitle not defined here yet
    local navs = navigation('Section', book, sectionNumber )
    
    local html = mw.html.create()
	
	-- Top breadcrumbs
	html:wikitext(crumbs)
	
	-- In-book navigation
	html:wikitext(navs)

    -- Create a div for the section
    local listChaptersDiv = html:tag('div'):addClass('wiki-book-layout-section'):css({
      ['padding'] = '.5rem 1rem',
    })

    -- Section header
    listChaptersDiv:tag('h3'):wikitext('📖 Chapters within this section')

    -- Fetch and append chapters using the helper
    local chaptersText = listChapters(section)
    if chaptersText ~= '' then
        listChaptersDiv:wikitext(chaptersText)
    end
    
    -- Create next chapter
	html:wikitext(createNextChapter())
	
    -- Append category
    html:wikitext(string.format('[[Category:%s]]', category))

    -- Set SMW properties
    local props = {
        'Has order=' .. sectionNumber,
        'Has parent page=' .. book
    }
    mw.smw.set(props)

    return html
end

-- Module entry point for Chapter pages.
function p.chapter(frame)
	
	local category = 'Chapter'
    local chapterTitle = mw.title.getCurrentTitle().fullText
    
    local book = getBook()
    
    local args = frame:getParent().args
	local section = args['Chapter section'] or ''
    local chapterNumber = args['Chapter number'] or '0'

    local authorsString = args['Chapter authors'] or ''

    local crumbs = breadcrumbs(book, section, chapterTitle)
    local navs = navigation('Chapter', section, chapterNumber )
        
    local html = mw.html.create()
	
	-- Top breadcrumbs
	html:wikitext(crumbs)
	
	-- In-section navigation
	html:wikitext(navs)

	local printAuthors = formatAuthors(authorsString, 'ul')
	
    -- Create a div for the chapter
    local listAuthorsDiv = html:tag('div'):addClass('wiki-book-layout-chapter')
    	:css({
    		['display'] = 'flex',
			  ['padding'] = '.5rem 1rem',
			  ['background-color'] = '#f7f7f7',
			  ['margin-bottom'] = '1rem'
    	})
		:tag('div'):wikitext('Primary authors'):css({
			['white-space'] = 'nowrap',
			['font-weight'] = 'bold',
		}):done()
		:tag('div'):wikitext(printAuthors):done()
	:done()
	
    -- Append category
    html:wikitext(string.format('[[Category:%s]]', category))
    
    -- Set SMW properties
    local props = {
        'Has order=' .. chapterNumber,
        'Has parent page=' .. section,
        'Chapter author=' .. authorsString,
        '+sep=;'
    }
    mw.smw.set(props)

    return html
end

return p